plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

bootRun {
	environment = dotenv()
	doFirst {
		println "ðŸŒ± JDBC URL: ${environment['SPRING_DATASOURCE_URL']}"
		println "ðŸŒ± USERNAME: ${environment['SPRING_DATASOURCE_USERNAME']}"
	}
}

def dotenv() {
	def envFile = file(".env")
	def props = [:]
	if (envFile.exists()) {
		envFile.eachLine {
			if (it && it.contains('=')) {
				def (key, value) = it.split('=', 2)
				props[key.trim()] = value.trim()
			}
		}
	}
	return props
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
	useJUnitPlatform()
}
